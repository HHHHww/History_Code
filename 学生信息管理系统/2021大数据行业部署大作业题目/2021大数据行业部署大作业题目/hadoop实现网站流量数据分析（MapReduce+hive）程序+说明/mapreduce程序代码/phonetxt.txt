import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


class data1 implements Writable{
    private String phonenumpart;//手机号码前七位，方便后期多表查询
    private String province;//省份
    private String yunyingshang;//运营商
    private String city;//城市

    public void write(DataOutput dataOutput) throws IOException {
        //序列化：将java对象转化为可跨机器传输数据流（二进制串/字节）的一种技术

        dataOutput.writeUTF(this.province);
        dataOutput.writeUTF(this.yunyingshang);
        dataOutput.writeUTF(this.city);
        dataOutput.writeUTF(this.phonenumpart);
    }

    public void readFields(DataInput dataInput) throws IOException {
        //反序列化：将可跨机器传输数据流（二进制串）转化为java对象的一种技术
        this.province=dataInput.readUTF();
        this.yunyingshang=dataInput.readUTF();
        this.city=dataInput.readUTF();
        this.phonenumpart=dataInput.readUTF();
    }
    public String getphonenumpart() {
        return phonenumpart;
    }
    public void setphonenumpart(String phonenumpart) {
        this.phonenumpart = phonenumpart;
    }
    public String getprovince() {
        return province;
    }
    public void setprovince(String province) {
        this.province = province;
    }
    public String getyunyingshang() {
        return yunyingshang;
    }
    public void setyunyingshang(String yunyingshang) {
        this.yunyingshang = yunyingshang;
    }
    public String getcity() {
        return city;
    }
    public void setcity(String city) {
        this.city = city;
    }
}

class DMapper extends Mapper<LongWritable,Text,NullWritable,data1>{
    protected void map(LongWritable key1, Text value1, Context context) throws IOException, InterruptedException {
        String data=value1.toString();//获取一行数据
        String[] words=data.split("\t");//通过“\t”把一行数据分成长度为8的数组
        if (    words[0].replace(" ","").equals("")||
                words[1].replace(" ","").equals("")||
                words[2].replace(" ","").equals("")||
                words[3].replace(" ","").equals("")||
                words[4].replace(" ","").equals("")||
                words[5].replace(" ","").equals("")||
                words[6].replace(" ","").equals("")||
                words[7].replace(" ","").equals("")){
                    return;
        }//判断数组每个值是不是缺失值，如果是，则退出方法，不把这行数据传到reducer，如果不是，则继续运行
        data1 oo=new data1();//创建数据流量对象
        oo.setphonenumpart(words[1]);//设置手机号前七位
        oo.setprovince(words[2]);//设置省份
        oo.setyunyingshang(words[4]);//设置运营商
        oo.setcity(words[3]);//设置城市
        context.write(NullWritable.get(),oo);//k2:NullWritable  v2：数据流量对象
    }
}

class DReducer extends Reducer<NullWritable, data1,NullWritable,Text>{
    protected void reduce(NullWritable k3, Iterable<data1> v3, Context context) throws IOException, InterruptedException {
        for (data1 oo:v3){
            //建立建表所需数据及对应格式
            String shuchu=oo.getphonenumpart()+","+oo.getprovince()+","+oo.getyunyingshang()+","+oo.getcity();
            context.write(NullWritable.get(),new Text(shuchu));//k4：NullWritable v4：TEXT 制表所需数据及格式
        }

    }

}

public class webdata2_main {
    public static void main(String[] args) throws Exception {
//1. 创建一个job和任务入口(指定主类)
        Job job = Job.getInstance(new Configuration());
        job.setJarByClass(webdata2_main.class);

//2. 指定job的mapper和输出的类型<k2 v2>
        job.setMapperClass(DMapper.class);
        job.setMapOutputKeyClass(NullWritable.class);
        job.setMapOutputValueClass(data1.class);

        //3. 指定job的reducer和输出的类型<k4  v4>
        job.setReducerClass(DReducer.class);
        job.setOutputKeyClass(NullWritable.class);
        job.setOutputValueClass(Text.class);

        //4. 指定job的输入和输出路径
        FileInputFormat.setInputPaths(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        //5. 执行job
        job.waitForCompletion(true);
    }
}
